#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{titlesec}
\titleformat{\part}
  {\normalfont\sffamily\huge}
  {\partname\ \thepart}{1em}{}
\titleformat{\chapter}[display]
  {\normalfont\sffamily\huge}
  {\chaptertitlename\ \thechapter}{20pt}{\Huge}
\titleformat{\section}
  {\normalfont\sffamily\Large}
  {\thesection}{1em}{}
\titleformat{\subsection}
  {\normalfont\sffamily\large}
  {\thesection}{1em}{}
\titleformat{\subsubsection}
  {\normalfont\sffamily\normalsize}
  {\thesection}{1em}{}

\usepackage{newtxtext}
\usepackage{titletoc}

\contentsmargin[1cm]{0cm}

\titlecontents{part}[0em]{\vskip12pt\bfseries\sffamily}
{\thecontentslabel\enspace}
{\hspace{1.05em}}
{ \hfill\contentspage}[\vskip 6pt]

\titlecontents{chapter}[0em]{\vskip12pt\bfseries\sffamily}
{\thecontentslabel\enspace}
{\hspace{1.05em}}
{ \hfill\contentspage}[\vskip 6pt]

\titlecontents{section}[1em]{\sffamily}
{\thecontentslabel\enspace}
{}
{\titlerule*[1pc]{.}\quad\contentspage}[\vskip 4pt]

\titlecontents{subsection}[2.7em]{\sffamily}
{\thecontentslabel\enspace}
{}
{\titlerule*[1pc]{.}\quad\contentspage}[\vskip 3pt]

\usepackage{listings}
\usepackage{color}
\definecolor{ltgry}{rgb}{0.95,0.95,0.95}
\definecolor{purplekeywords}{rgb}{0.75,0,0.75}
\definecolor{greycomments}{rgb}{0.5,0.5,0.5}
\definecolor{redstrings}{rgb}{0.64,0.08,0.08}
\lstset{backgroundcolor=\color{ltgry}}

\lstset{columns=fixed, basicstyle=\ttfamily, basewidth=0.55em}

\usepackage{pifont}
\newcommand{\xmark}{\ding{55}}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Baskerville"
\font_sans "default" "Helvetica"
\font_typewriter "default" "Andale Mono"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 80 80
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 2
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language=Java,showspaces=false,showtabs=false,breaklines=true,showstringspaces=false,breakatwhitespace=true,escapeinside={(*@}{@*)},commentstyle={\color{greycomments}},keywordstyle={\color{purplekeywords}\bfseries},stringstyle={\color{redstrings}},basicstyle={\ttfamily},morekeywords={ var, fn, print,in }"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Optimize3: An optimization package for 
\emph on
morpho
\end_layout

\begin_layout Chapter
Overview
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/structure.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
Classes in the optimize3 package 
\series default
and how they interact.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
optimize3
\family default
 package faciliates the solution of optimization problems, with a particular
 focus on the shape optimization problems for which 
\emph on
morpho
\emph default
 was designed.
 The design is intended to be flexible, enabling customization of the choice
 of algorithm and easy incorporation of new algorithms by the developer
 or user.
 To use the package, simply import it into your 
\emph on
morpho
\emph default
 program as usual:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import optimize3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This imports several subsidiary modules, which provide three main kinds
 of class that work together (Fig.
 1): 
\end_layout

\begin_layout Description
OptimizationProblem classes are used to describe the problem to be solved.
 Functionals may be added to the problem either as energies or constraints
 with set target values.
 
\end_layout

\begin_layout Description
OptimizationAdapter classes provide a uniform interface for optimization
 targets, enabling the setting and getting parameters as well as calculating
 the value of the objective function, constraints and gradients.
 Adapters are provided, for example, to take an 
\emph on
OptimizationProblem
\emph default
 and a target object, such as a Mesh or a Field, and compute the value of
 the objective function and gradients with respect to the target.
 Adapters can also be used to transform one type of problem to another,
 e.g.
 a constrained problem to an unconstrained problem, facilitating the use
 of different optimization algorithms.
 
\end_layout

\begin_layout Description
OptimizationController classes objects implement an optimization algorithm
 or a useful subcomponent.
 Controllers work by calling appropriate methods on associated OptimizationAdapt
ers to obtain value, gradient and even Hessians in some cases, and direct
 how parameters are to be adjusted as the algorithm proceeds.
 
\end_layout

\begin_layout Chapter
Using optimize3
\end_layout

\begin_layout Standard
To establish notation, the goal of the 
\family typewriter
optimize3
\family default
 package is to solve the following standard problem, 
\begin_inset Formula 
\begin{align}
\min_{\mathbf{x}}f(\mathbf{x})\nonumber \\
s.t.\ \mathbf{c}(\mathbf{x}) & =0\nonumber \\
\mathbf{d}(\mathbf{x}) & \ge0\label{eq:Problem}
\end{align}

\end_inset

where 
\begin_inset Formula $f(\mathbf{x})$
\end_inset

 is the objective function, 
\begin_inset Formula $\mathbf{x}$
\end_inset

 are its parameters, 
\begin_inset Formula $\mathbf{c}(\mathbf{x})$
\end_inset

 is a vector of equality constrained functions, and 
\begin_inset Formula $\mathbf{d}$
\end_inset

 is a vector of inequality constrained functions.
 
\end_layout

\begin_layout Standard
We shall use the subscript notation 
\begin_inset Formula $\mathbf{x}_{k}$
\end_inset

 to refer to the value of a quantity at a particular iteration 
\begin_inset Formula $k$
\end_inset

.
 If 
\begin_inset Formula $\mathbf{c}$
\end_inset

 and 
\begin_inset Formula $\mathbf{d}$
\end_inset

 are empty vectors the problem is said to be 
\emph on
unconstrained
\emph default
.
 If constraints are present, the set 
\begin_inset Formula $\mathbf{x}\in\Omega$
\end_inset

 compatible with the constraints is called the 
\emph on
feasible
\emph default
 set.
 
\end_layout

\begin_layout Standard
We shall also use consistent notation for the gradient of the objective
 function, 
\begin_inset Formula 
\[
\mathbf{g}=\frac{\partial f}{\partial x_{i}}
\]

\end_inset

and its hessian, 
\begin_inset Formula 
\[
\mathbf{H}=H_{ij}=\frac{\partial^{2}f}{\partial x_{i}\partial x_{j}}.
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
OptimizationAdapters convert a problem of interest with an arbitrary representat
ion into the standard form 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:Problem"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
[More to go here]
\end_layout

\begin_layout Chapter
OptimizationProblem
\end_layout

\begin_layout Standard
An OptimizationProblem is a container object that describes an optimization
 problem using Functional objects, which can be used as part of the objective
 function (these are referred to as 
\begin_inset Quotes eld
\end_inset

energies
\begin_inset Quotes erd
\end_inset

), or as constraints.
 Earlier versions of 
\emph on
morpho
\emph default
 provided the same user interface, which has been adopted and integrated
 into the 
\family typewriter
optimize3
\family default
 package.
 Creation of an OptimizationProblem is described in the main 
\emph on
morpho
\emph default
 manual; we provide a simple example below appropriate for minimizing the
 length of a closed loop at constant enclosed area:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var problem = OptimizationProblem(mesh)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

problem.addenergy(Length())
\end_layout

\begin_layout Plain Layout

problem.addconstraint(EnclosedArea())
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
OptimizationAdapters
\end_layout

\begin_layout Standard
OptimizationAdapter and its subclasses exist to provide a uniform interface
 for OptimizationControllers to call.
 This design enables optimization algorithms to be separated from the task
 of evaluating quantities like gradients and widens the range of things
 that could be optimized—all that's needed to optimize an arbitrary object
 that depends on parameters is to create an appropriate OptimizationAdapter.
 
\end_layout

\begin_layout Standard
Further, adapter objects can be connected together to create useful effects.
 An adapter such as PenaltyAdapter converts a constrained problem to an
 unconstrained problem, for example, facilitating use of a different set
 of OptimizationControllers.
 Appropriate adapters could also be used within a broader algorithm to solve
 a subproblem of interest, for example performing a linesearch on an augmented
 objective function rather than the original one.
 
\end_layout

\begin_layout Section
Available adapters
\end_layout

\begin_layout Subsection
FunctionAdapter
\end_layout

\begin_layout Standard
A FunctionAdapter provides an interface to minimize a callable 
\emph on
morpho
\emph default
 object, i.e.
 a function, invocation or closure, with respect to its positional parameters.
 To miminize a simple quadratic function 
\begin_inset Formula $(x-1/2)^{2}+(y-1)^{2}+\frac{1}{4}xy$
\end_inset

, for example, 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fn func(x, y) {
\end_layout

\begin_layout Plain Layout

    return (x-0.5)^2 + (y-1)^2 + 0.25*x*y
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

var adapt = FunctionAdapter(func, start=Matrix(2)) // Start from (0,0)
\end_layout

\end_inset

You can specify the starting point through the 
\family typewriter
start
\family default
 optional parameter in the constructor, and provide functions that return
 the gradient and/or hessian via 
\family typewriter
gradient
\family default
 and 
\family typewriter
hessian
\family default
.
 If these are not provided, FunctionAdapter will compute approximations
 using finite differences.
 
\end_layout

\begin_layout Standard
If you want to optimize a callable object with respect to its optional parameter
s, you can wrap it in another function or closure:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fn wrapper(x, y) {
\end_layout

\begin_layout Plain Layout

    return myfunc(a=x, b=y)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

var adapt = FunctionAdapter(wrapper, start=Matrix(2)) // Start from (0,0)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
MeshAdapter
\end_layout

\begin_layout Standard
A MeshAdapter evaluates the value and gradient of a given OptimizationProblem
 with respect to a Mesh's degrees of freedom; both must be supplied in the
 constructor.
 The current configuration of the mesh is used as the starting point.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var adapt = MeshAdapter(problem, mesh)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
FieldAdapter
\end_layout

\begin_layout Standard
A FieldAdapter evaluates the value and gradient of a given OptimizationProblem
 with respect to a Field's degrees of freedom; both must be supplied in
 the constructor.
 The current configuration of the field is used as the starting point.
 Only functionals in the OptimizationProblem that actually depend on the
 supplied field are included in the objective function.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var adapt = FieldAdapter(problem, field)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
PenaltyAdapter
\end_layout

\begin_layout Standard
A PenaltyAdapter can be used to convert the general constrained problem
 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:Problem"
plural "false"
caps "false"
noprefix "false"

\end_inset

 into an unconstrained problem.
 It must be constructed with another adapter as the target, and reports
 the value and derivatives of the new objective function, 
\begin_inset Formula 
\begin{equation}
\mathcal{L}=f(\mathbf{x})+\mu\left|\mathbf{c}\right|^{2}+\mu\left|\mathbf{d}^{-}\right|^{2},\label{eq:Penalty}
\end{equation}

\end_inset

where 
\begin_inset Formula $\mathbf{d}^{-}$
\end_inset

 is defined for each component 
\begin_inset Formula $d_{i}^{-}=argmin(0,d_{i})$
\end_inset

, i.e.
 nonzero for constraints 
\emph on
outside
\emph default
 the feasible region.
 The parameter 
\begin_inset Formula $\mu$
\end_inset

 is called a 
\emph on
penalty parameter
\emph default
.
 
\end_layout

\begin_layout Standard
Using this adapter facilitates penalty methods, that solve 
\begin_inset Formula $\min_{\mathbf{x}}\mathcal{L}(\mu_{m})$
\end_inset

 for monotonically increasing penalty parameters 
\begin_inset Formula $\mu_{m}$
\end_inset

.
 As 
\begin_inset Formula $\mu\to\infty$
\end_inset

, the solution of the new unconstrained problem should converge on the constrain
ed problem.
 
\end_layout

\begin_layout Standard
PenaltyAdapter relies on the attached adapter to provide value, gradient
 and hessian information if requested by the controller; note especially
 that the hessian of the constraint functions, and not just their gradient,
 is required to compute the hessian of 
\begin_inset Formula $\mathcal{L}$
\end_inset

 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Penalty"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
LagrangeMultiplierAdapter
\end_layout

\begin_layout Standard
A LagrangeMultiplierAdapter converts the general constrained problem 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:Problem"
plural "false"
caps "false"
noprefix "false"

\end_inset

 into the new unconstrained objective function, 
\begin_inset Formula 
\[
\mathcal{L}=f(\mathbf{x})+\mathbf{\lambda}^{T}\cdot\mathbf{c}+\mathbf{\lambda}'^{T}\cdot\mathbf{d}^{-}
\]

\end_inset

where 
\begin_inset Formula $\lambda$
\end_inset

 and 
\begin_inset Formula $\lambda'$
\end_inset

 are vectors of Lagrange multipliers, one for each constraint present in
 the original problem.
\end_layout

\begin_layout Subsection
AugmentedLagrangianAdapter
\end_layout

\begin_layout Standard
An AugmentedLagrangianAdapter converts the general constrained problem 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:Problem"
plural "false"
caps "false"
noprefix "false"

\end_inset

 into the new unconstrained objective function,
\begin_inset Formula 
\[
\mathcal{L}=f(\mathbf{x})+\mu\left|\mathbf{c}\right|^{2}+\mu\left|\mathbf{d}^{-}\right|^{2}+\mathbf{\lambda}^{T}\cdot\mathbf{c}+\mathbf{\lambda}'^{T}\cdot\mathbf{d}^{-}
\]

\end_inset

where 
\begin_inset Formula $\lambda$
\end_inset

 and 
\begin_inset Formula $\lambda'$
\end_inset

 are vectors of Lagrange multipliers, one for each constraint present in
 the original problem and 
\begin_inset Formula $\mu$
\end_inset

 is a penalty parameter.
 The resulting formulation combines elements of Lagrange multiplier and
 penalty methods; algorithms that use these adapters update both 
\begin_inset Formula $\mu$
\end_inset

 and 
\begin_inset Formula $\lambda$
\end_inset

 as they converge on a solution.
\end_layout

\begin_layout Subsection
ProxyAdapter
\end_layout

\begin_layout Standard
Implements the 
\emph on
proxy
\emph default
 software design pattern
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides (1994).
 Design Patterns: Elements of Reusable Object-Oriented Software.
 Addison Wesley.
 pp.
 207ff
\end_layout

\end_inset

 for the adapter protocol.
 Calls to 
\family typewriter
value
\family default
, 
\family typewriter
gradient
\family default
, etc.
 are returned from a cache if they have already been calculated, or are
 calculated as necessary.
 Every time 
\family typewriter
set
\family default
 is called with new parameters, the cache is reset.
 This adapter prevents multiple evaluation of potentially expensive quantities
 like the gradient or the hessian by OptimizationControllers.
 Using a ProxyAdapter may help simplify the writing a controller: there's
 no need to temporarily store these quantities across methods, for example.
\end_layout

\begin_layout Standard
A ProxyAdapter also keeps track of how many times the objective function
 value, gradient etc.
 are actually calculated and can display this information using the 
\family typewriter
report
\family default
 method.
 This information can also be obtained as a list in the order 
\begin_inset Formula $(N_{f},N_{\mathbf{g}},N_{\mathbf{H}},N_{\mathbf{c}},N_{\nabla\mathbf{c}},N_{\Delta\mathbf{c}})$
\end_inset

 from the 
\family typewriter
countevaluations
\family default
 method.
\end_layout

\begin_layout Section
OptimizationAdapter interface
\end_layout

\begin_layout Standard
An adapter 
\series bold
must
\series default
 implement the following methods, except where marked optional.
 
\end_layout

\begin_layout Subsection
set(x)
\end_layout

\begin_layout Standard
Sets the current value of the parameters to 
\begin_inset Formula $x$
\end_inset

, which should be supplied as a column vector.
 
\end_layout

\begin_layout Subsection
get()
\end_layout

\begin_layout Standard
Returns the current value of the parameters as a column vector.
 
\end_layout

\begin_layout Subsection
value()
\end_layout

\begin_layout Standard
Returns the value of the objective function.
 
\end_layout

\begin_layout Subsection
gradient()
\end_layout

\begin_layout Standard
Returns the gradient of the objective function at the current parameters
 as a column vector.
 
\end_layout

\begin_layout Subsection
hessian()
\end_layout

\begin_layout Standard
Returns the hessian of the objective function at the current parameters
 as a column vector, or 
\family typewriter
nil
\family default
 if a hessian is not available.
\end_layout

\begin_layout Subsection
countconstraints()
\end_layout

\begin_layout Standard
Returns the number of constraints present.
 In future, this should be a Tuple with the first element being the number
 of equality constraints and the second being the number of inequality constrain
ts.
 
\end_layout

\begin_layout Subsection
constraintvalue() 
\end_layout

\begin_layout Standard
Returns a List containing the value(s) of any constraints.
 
\end_layout

\begin_layout Subsection
constraintgradient()
\end_layout

\begin_layout Standard
Returns a List containing the gradient(s) of any constraints as column vectors.
\end_layout

\begin_layout Chapter
OptimizationControllers
\end_layout

\begin_layout Standard
In this chapter we review optimization algorithms available in the package,
 which are implemented as OptimizationControllers, with enough context to
 understand their relative utility.
 For a deeper understanding of these algorithms, the reader should consult
 standard textbooks on optimization theory.
 
\end_layout

\begin_layout Standard
New OptimizationControllers can easily be defined, including ones created
 in extensions linking to external optimization libraries.
\end_layout

\begin_layout Section
Convergence criteria
\end_layout

\begin_layout Standard
The base OptimizationController class provides two basic convergence criteria,
 that are controlled by the properties 
\family typewriter
gradtol
\family default
 and 
\family typewriter
etol
\family default
.
\end_layout

\begin_layout Enumerate
The first and most obvious criterion is to examine the norm of the gradient
 of the objective function,
\begin_inset Formula 
\[
\left|g_{k}\right|<\texttt{gradtol}
\]

\end_inset

where 
\family typewriter
gradtol
\family default
 is 
\begin_inset Formula $1\times10^{-6}$
\end_inset

 by default.
 
\end_layout

\begin_layout Enumerate
The second is to monitor the change in the value of the objective function
 in successive iterations of the algorithm, 
\begin_inset Formula $f_{k}$
\end_inset

 and 
\begin_inset Formula $f_{k+1}$
\end_inset

 and stop if, 
\begin_inset Formula 
\[
\begin{cases}
\left|f_{k+1}-f_{k}\right|<\texttt{etol}, & \left|f_{k+1}\right|<\texttt{etol}\\
\frac{\left|f_{k+1}-f_{k}\right|}{\left|f_{k+1}\right|}<\texttt{etol}, & \text{otherwise}
\end{cases}
\]

\end_inset

i.e.
 ensuring a relative tolerance of 
\begin_inset Formula $\texttt{etol}$
\end_inset

 unless 
\begin_inset Formula $f$
\end_inset

 itself is nearly zero, in which case 
\begin_inset Formula $\texttt{etol}$
\end_inset

 is an absolute tolerance.
 
\end_layout

\begin_layout Standard
If, during optimization either of these convergence criteria are true, then
 the optimization terminates.
 
\end_layout

\begin_layout Section
Gradient descent methods
\end_layout

\begin_layout Standard
Gradient descent methods select a search direction 
\begin_inset Formula $\mathbf{d}_{k}$
\end_inset

 and update it according to the rule,
\begin_inset Formula 
\[
\mathbf{x}_{k+1}\leftarrow\mathbf{x}_{k}+\gamma_{k}\mathbf{d}_{k}
\]

\end_inset

where 
\begin_inset Formula $\gamma_{k}$
\end_inset

 is the 
\emph on
stepsize
\emph default
.
 
\end_layout

\begin_layout Subsection
GradientDescentController
\end_layout

\begin_layout Standard
The simplest choice, called 
\emph on
steepest descent
\emph default
, is implemented by the GradientDescentController class.
 It simply uses the negative of the gradient of 
\begin_inset Formula $f$
\end_inset

 as the search direction, i.e.
 
\begin_inset Formula $\mathbf{d}_{k}=-\mathbf{g}_{k}$
\end_inset

 and 
\begin_inset Formula $\gamma_{k}=\gamma$
\end_inset

 constant for all iterations.
 This method is cheap per iteration, requiring a single evaluation of the
 gradient, but typically converges very slowly indeed and may oscillate
 around the minimum in some cases.
 The stepsize 
\begin_inset Formula $\gamma$
\end_inset

 can be set in the initializer, or by changing the property 
\family typewriter
stepsize
\family default
; the default value is 
\begin_inset Formula $0.1$
\end_inset

.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var control = GradientDescentController(adapter, stepsize=0.1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
While GradientDescentController is rarely useful directly, it is sometimes
 helpful in very constrained problems (where linesearches offer little benefit)
 or to establish that a new OptimizationAdapter is indeed working correctly.
 
\end_layout

\begin_layout Subsection
LineSearchController
\end_layout

\begin_layout Standard
An improvement in performance can be obtained by considering the one parameter
 subproblem,
\begin_inset Formula 
\begin{equation}
\min_{\alpha_{k}}f(\mathbf{x}_{k}+\gamma_{k}\mathbf{d}_{k})\label{eq:Linesearchproblem}
\end{equation}

\end_inset

A LineSearchController aims to find a stepsize 
\begin_inset Formula $\gamma_{k}$
\end_inset

 at each iteration that approximately solves this subproblem.
 The search direction 
\begin_inset Formula $\mathbf{d}_{k}$
\end_inset

 is by default chosen to be the steepest descent direction 
\begin_inset Formula $\mathbf{d}_{k}=-\mathbf{g}_{k}$
\end_inset

, but could be chosen by some other method either by subclassing LineSearchContr
oller and replacing the 
\family typewriter
searchdirection
\family default
 method, or by performing linesearches one at a time by setting the 
\family typewriter
direction
\family default
 property and invoking the 
\family typewriter
step
\family default
 method.
 
\end_layout

\begin_layout Standard
Typically, it's not necessary to solve 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:Linesearchproblem"
plural "false"
caps "false"
noprefix "false"

\end_inset

 very precisely.
 LineSearchController therefore implements a 
\emph on
backtracking line search
\emph default
, starting with 
\begin_inset Formula $\mathbf{\gamma}_{k}=1$
\end_inset

 and then successively reducing it by a factor 
\begin_inset Formula $\beta\in(0,1]$
\end_inset

 at a time (so that 
\begin_inset Formula $\mathbf{\gamma}_{k}=\beta^{n}$
\end_inset

) until the 
\emph on
Armijo condition
\emph default
, 
\begin_inset Formula 
\[
f(\mathbf{x}_{k}+\gamma_{k}\mathbf{d}_{k})<f(\mathbf{x}_{k})+\alpha\mathbf{g}_{k}\cdot\mathbf{d}_{k},
\]

\end_inset

is met, where 
\begin_inset Formula $\alpha\in(0,1)$
\end_inset

 is a parameter.
 Success indicates that the function has decreased at least proportionately
 to what might be predicted from the gradient, and hence this condition
 helps to prevent 
\begin_inset Quotes eld
\end_inset

overshooting
\begin_inset Quotes erd
\end_inset

 the minimum.
 Default parameters are 
\begin_inset Formula $\alpha=0.2$
\end_inset

 and 
\begin_inset Formula $\beta=0.5$
\end_inset

; these can be adjusted by setting the 
\family typewriter
alpha
\family default
 and 
\family typewriter
beta
\family default
 in the LineSearchController's initializer or by setting the properties
 directly.
 
\end_layout

\begin_layout Standard
There is a limit placed on the number of backtracking steps in a property
 called 
\family typewriter
maxsteps
\family default
; if this is exceeded a warning 
\family typewriter
OptLnSrchStpsz
\family default
 is generated.
 The LineSearchController also checks to ensure that 
\begin_inset Formula $\mathbf{g}_{k}\cdot\mathbf{d}_{k}\leq0$
\end_inset

, i.e.
 that the search direction is actually downward.
 If this is 
\emph on
not
\emph default
 the case, a warning 
\family typewriter
OptLnSrchDrn
\family default
 is raised and it is likely that there is an error somewhere, either in
 the gradient calculation (if at some stage you provided one) or in the
 algorithm that calculated the search direction.
 
\end_layout

\begin_layout Subsection
ExactLineSearchController
\end_layout

\begin_layout Standard
While it is rarely valuable to solve the line search subproblem 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:Linesearchproblem"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to high precision, an ExactLineSearchController will be provided to do
 so if necessary.
 This controller performs a 1D minimization using Brent's algorithm.
 
\end_layout

\begin_layout Section
Newton and Quasi-Newton methods
\end_layout

\begin_layout Standard
Newton's method utilizes the observation that around a given point 
\begin_inset Formula $\mathbf{x}_{k}$
\end_inset

, a sufficiently smooth function can be approximated by a Taylor expansion,
 
\begin_inset Formula 
\begin{equation}
f(\mathbf{x})\approx f(\mathbf{x}_{k})+\mathbf{g}\cdot(\mathbf{x}-\mathbf{x}_{k})+\frac{1}{2}(\mathbf{x}-\mathbf{x}_{k})^{T}\cdot\mathbf{H}\cdot(\mathbf{x}-\mathbf{x}_{k})+...\label{eq:TaylorExpansion}
\end{equation}

\end_inset

Taking the gradient of 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:TaylorExpansion"
plural "false"
caps "false"
noprefix "false"

\end_inset

 yields, 
\begin_inset Formula 
\[
\nabla f(\mathbf{x})=\mathbf{g}\cdot(\mathbf{x}-\mathbf{x}_{k})+\mathbf{H}\cdot(\mathbf{x}-\mathbf{x}_{k})+...
\]

\end_inset

At the minimum of 
\begin_inset Formula $f$
\end_inset

, its gradient should be zero, i.e.
 that,
\begin_inset Formula 
\[
0=\mathbf{g}\cdot(\mathbf{x}-\mathbf{x}_{k})+\mathbf{H}\cdot(\mathbf{x}-\mathbf{x}_{k})+...
\]

\end_inset

and hence, neglecting higher order terms, we can obtain an update 
\begin_inset Formula $(\mathbf{x}-\mathbf{x}_{k})$
\end_inset

 by solving the linear system,
\begin_inset Formula 
\begin{equation}
\mathbf{H}_{k}\cdot(\mathbf{x}-\mathbf{x}_{k})=-\mathbf{g_{k}},\label{eq:NewtonStep}
\end{equation}

\end_inset

which is called a Newton step.
 If 
\begin_inset Formula $f(\mathbf{x})$
\end_inset

 is a quadratic function, then Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:TaylorExpansion"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is no longer an approximation and the correct solution can be obtained
 in one iteration.
 In practice, the solution of Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:NewtonStep"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is used as a search direction 
\begin_inset Formula $\mathbf{d}_{k}$
\end_inset

 for a line search.
 
\end_layout

\begin_layout Subsection
NewtonController
\end_layout

\begin_layout Standard
The NewtonController class implements Newton updates: in each iteration
 a search direction is identified from Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:NewtonStep"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and then a linesearch is performed.
 NewtonController requires an OptimizationAdapter that can calculate a hessian
 and raises the error 
\family typewriter
OptNoHess
\family default
 it it detects this is not the case.
\end_layout

\begin_layout Subsection
ConjugateGradientController
\end_layout

\begin_layout Subsection
BFGSController
\end_layout

\begin_layout Standard
The BFGS algorithm aims to compute an estimate of the Hessian, or it's inverse,
 using 
\end_layout

\begin_layout Subsection
LBFGSController
\end_layout

\begin_layout Section
Constrained optimization
\end_layout

\end_body
\end_document
