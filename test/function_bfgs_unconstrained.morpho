// Test conjugate gradient on a poorly scaled quadratic

import optimizationadapter
import optimizationcontroller
import "quadratic.morpho"

var f = Quadratic([1.3, -0.5, 0.9, 1.2, 5], [1,5,0.1,3,0.1]).func() 

var adapt = FunctionAdapter(f, start=Matrix(5))

class BFGSController is LineSearchController {
  searchdirection() { // Determine the search direction
    super.searchdirection()
    self._direction = -self._gradient/self.B
  }

  start() {
    self.B = IdentityMatrix(self.adapter.get().count())
  }

  update() {
    var sk = self.stepsize * self._direction
    var yk = self.adapter.gradient() - self._gradient

    var u = self.B*sk 
    self.B += yk*yk.transpose()/yk.inner(sk) - u*u.transpose()/sk.inner(u)

    // print Matrix(self.B.eigenvalues()).transpose()/2
    // print self.B.format("%6.3f")
  }

  optimize(nsteps) {  // Draft of new optimization loop
    self.start() 
    for (i in 1..nsteps) {
      self.value() 
      self.searchdirection() 
      self.report(i-1) 
      if (self.hasconverged()) return 

      self.step() 
      self.reproject() 
      self.update()
    }
  }
}

var control = BFGSController(adapt)

control.optimize(100)

print "Solution:"
print adapt.get()
