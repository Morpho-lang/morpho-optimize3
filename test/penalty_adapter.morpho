// Create a PenaltyAdapter 

import optimize3

fn func(x, y, z) {
    return (x-0.5)^2 + 0.5*(y-1)^2 + 2*(z-2)^2
}

fn g(x, y, z) {
    return x + y - 1
}

var start = Matrix([0,0,0])

var adapt = FunctionAdapter(func, start=start, constraints = [g])
var padapt = PenaltyAdapter(adapt)

var control = LineSearchController(padapt)

for (i in 1..10) {
  padapt.setpenalty(10*padapt.penalty())
  control.optimize(200)
}

print "Penalty ${padapt.penalty()}"

print "Solution:"
print padapt.get()
